summary(mtcars)
plot(mtcars$mpg, mtcars$cyl)
plot(mtcars$mpg, mtcars$cyl)
library(datasets)
failthful
faithful
with(faithful,plot(eruptions, waiting))
title(main="Geyser data")
getwd()
?postscript
?pdf
?Devices
?dev.copy2pdf
dev.copy2pdf("erruptions.pdf")
dev.copy2pdf()
?par
sqrt(pi)
2/sqrt(pi)
2/sqrt(pi)-1
(2/sqrt(pi)-1)/pi
pi/2
library(lattice)
install.packages("lattice")
library(lattice)
install.packages("lattice")
library(lattice)
library(datasets)
xyplot(Ozone~Wind, data=airquality)
head(ozone)
head(Ozone)
xyplot(Ozone~Wind | Month, data=airquality)
xyplot(Ozone~Wind | Month, data=airquality,layout=c(1,5))
xyplot(Ozone~Wind | Month, data=airquality,layout=c(5,1))
xyplot(Ozone~Wind | Month, data=airquality,layout=c(3,2))
t = xyplot(Ozone~Wind | Month, data=airquality,layout=c(3,2))
t
summary(t)
library(nlme)
xyplot(weight ~ Time | Diet, BodyWeight)
panel.abline()
?panel.abline
?points
?lines
?axis
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
?par
?print.trellis
?trellis.par.set
?splom
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
str(mpg)
qplot(display, hwy, data=mpg)
qplot(displ, hwy, data=mpg)
qplot(displ, hwy, data=mpg,color=drv)
qplot(displ, hwy, data=mpg,geom=c("point","smooth"))
qplot(displ, data=mpg)
qplot(displ, data=mpg,fill=drv)
qplot(displ, hwy, data=mpg,facets=.~drv)
qplot(hwy, data=mpg,facets=.~drv)
qplot(hwy, data=mpg,facets=drv~)
qplot(hwy, data=mpg,facets=drv~.)
qplot(hwy, data=mpg,facets=drv~.,binwidth=3)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
str(airquality)
data(airquality)
str(airquality)
?geom
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
hclust
getwd()
getwd()
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(plyr)
install.packages("data.table")
libary(kernlab)
install.packages("kernlab")
libary(kernlab)
library(kernlab)
data(spam)
set.seed(333)
smallSpam <- spam[sample(dim(spam)[1],size=10),]
smallSpam
dim(smallSpam)
spamLabel <- (smallSpam$type=="spam")*1 + 1
plot(smallSpam$capitalAve, col=spamLabel)
dim(Spam)
dim(spam)
head(spam)
str(spam)
summary(spam)
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
diagnosis
data(concrete)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
inTrain
head(mixtures)
install.packages("ggplot2")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(mixtures)
library(Hmisc)
install.packages("Hmisc")
featurePlot(mixtrues)
featurePlot(mixtures)
featurePlot(y=mixtures)
featurePlot(x=mixtures)
View(mixtures)
featurePlot(x=mixtures,y=mixtures$CompressiveStrength)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
adData = data.frame(diagnosis,predictors)
View(adData)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(concrete)
summary(mixtures)
hist(mixtures$CompressiveStrength)
hist(log(mixtures$CompressiveStrength))
hist(log(mixtures$CompressiveStrength),bins=10)
?hist
hist(log(mixtures$CompressiveStrength),freq=T)
hist(log(mixtures$CompressiveStrength),freq=F)
hist(log(mixtures$CompressiveStrength),freq=F)
hist(log(mixtures$CompressiveStrength),bins=10)
hist((mixtures$CompressiveStrength),freq=T)
plot(mixtures$SuperPlasticizer )
hist(mixtures$SuperPlasticizer)
View(mixtures)
hist(mixtures$Superplasticizer)
hist(log(mixtures$Superplasticizer))
hist((mixtures$Superplasticizer))
hist(log(mixtures$Superplasticizer))
hist(log(mixtures$Superplasticizer+1))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength,col=mixtures$Cement)
plot(mixtures$CompressiveStrength,col=mixtures$FlyAsh)
library(Hmisc)
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Cement,g=5)
)
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Cement,g=5))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=5))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Age,g=5))
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Age,g=5))
plot(cut2(mixtures$CompressiveStrength,g=5),col=cut2(mixtures$Age,g=5))
plot(cut2(mixtures$CompressiveStrength,g=5),col=cut2(mixtures$FlyAsh,g=5))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=5))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Age,g=5))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$Age,g=4))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=4))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=3))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=2))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=8))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=2))
plot(mixtures$CompressiveStrength,col=cut2(mixtures$FlyAsh,g=5))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=5))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=4))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=5))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=4))
plot(training$CompressiveStrength,col=cut2(training$Age,g=4))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=4))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=10))
plot(training$CompressiveStrength,col=cut2(training$FlyAsh,g=5))
plot(training$CompressiveStrength))
plot(training$CompressiveStrength)
plot(mixtures$CompressiveStrength)
plot(testing$CompressiveStrength)
plot(training'$CompressiveStrength)
)
c
))
;
''
plot(training$CompressiveStrength)
plot(mixtures$CompressiveStrength)
View(training)
View(testing)
plot(mixtures$FlyAsh)
plot(training$FlyAsh)
plot(training$CompressiveStrength,training$FlyAsh)
plot(training$CompressiveStrength,training$Age)
hist(training$CompressiveStrength)
hist(training$FlyAsh)
hist(training$Age)
library(ISLR)
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
Wage
Wage = subset(Wage, select=-c(logwage))
summary(wage)
summary(Wage)
data(Wage)
wage = subset(Wage, select=-c(logwage))
summary(Wage)
summary(wage)
inTrain <- CreateDataPartition(y=wage$wage,p=.7,list=F )
inTrain <- createDataPartition(y=wage$wage,p=.7,list=F )
train <- wahe[inTrain,]
train <- wage[inTrain,]
test <- wage[-inTrain,]
dim(train)
dim(test)
qplot(age, wage, data=wage)
qplot(age, wage, data=wage,col=blue)
qplot(age, wage, data=wage,col="blue")
qplot(age, wage, data=wage,color="blue")
qplot(age, wage, data=wage,color=jobclass)
qplot(age, wage, data=wage,color=education)
modFit <- train(wage~age+jobclass+education,method="lm",data=training)
modFit <- train(wage~age+jobclass+education,method="lm",data=train)
finalModel <- modFit$finalModel
print(modFit)
predic(modFite, test)
predict(modFite, test)
predict(modFit, test)
finalModel
plot(finalModel,1,pch=19,cex=0.5)
pred <- predict(modFit, test)
qplot(wage, pred, data=test)
install.packages("cacher")
install.packages(c("BradleyTerry2", "caret", "lme4", "MASS", "Matrix", "mgcv", "Rcpp"))
install.packages(c("BradleyTerry2", "caret", "lme4", "MASS",
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages(c("Matrix", "mgcv"))
install.packages(c("BradleyTerry2", "caret", "lme4", "MASS"))
?checkcode
library(cache)
library(caches)
runif(1)
qunif(75)
qunif(.75)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
x%*%w
1.03/7
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
lm(y~0+x)
data(mtcars)
attach(mtcars)
lm(mpg~weight)
names(mtcars)
lm(mpg~wt)
1.5*.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x-mean(x)
(x-mean(x))/sx(d)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
lm(x~y)
lm(y~x)
plot(y,x)
plot(x,y, type=";")
plot(x,y, type="l")
plot(x,y, type="dot")
plot(x,y)
library(UsingR)
install.packages("UsingR")
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
8
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
?dimaond
?diamond
diamond
attach(diamond)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21,frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
install.packages(c("AppliedPredictiveModeling", "class", "Formula", "markdown", "mgcv", "mime", "nloptr"))
library(caret)
pt(.4)
pt(.4,df =10)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(ggplot2)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
?t.test
qt(.95, mean=1100, sd=30)
?qt
qt(.95, n=9, mean=1100, sd=30)
?t.test
data(sleep)
head(sleep)
sleep
mean = 1100
sd = 30
n = 9
qt(.95, df=n-1)*(sd/sqrt(n))
e = qt(.95, df=n-1)*(sd/sqrt(n))
e
mean -e
mean + e
e = qt(.95, df=n)*(sd/sqrt(n))
e
(mean-e, mean + e)
[mean-e, mean + e]
c(mean-e, mean + e)
e = qt(.95, df=n-1)*(sd/sqrt(n))
c(mean-e, mean + e)
qt(.95,n-8)
qt(.95,df=8)
6/qt(.95,df=8)
6/qt(.95,df=8)
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("reshape2")
library(dplyr)
install.packages("dplyr")
6/qt(.95,df=8)
6/qt(.95,df=8)/2
?t.test
qt(.975,18)
qt(.975,df=18)
qt(.975,df=18)*sqrt(1.28/10)
c(-2-.75,-2+.75)
6/qt(.95,8)
qt(.975,198)
qnorm(.975,198)
qnorm(1-.975,198)
qnorm(1-.975)
qnorm(.975)
18_1/8
18+1/8
sqrt(18+1/8)
sqrt(18+1/8)*.196
.834/10
ttest <- function(nx, ny, mx, my, sdx, sdy,a) {
Sp <- sqrt( ((nx-1)*sdx^2 + (ny-1)*sdy^2)/(nx+ny-2) )
ci = (ny-nx) + c(-1,1)*qt(a,df=nx+ny-2)*Sp*sqrt((1/nx)+(1/ny))
ci
}
ttest <- function(nx, ny, mx, my, sdx, sdy,a) {
Sp <- sqrt( ((nx-1)*sdx^2 + (ny-1)*sdy^2)/(nx+ny-2) )
ci = (nx-ny) + c(-1,1)*qt(a,df=nx+ny-2)*Sp*sqrt((1/nx)+(1/ny))
ci
}
ttest(9,9,-3,1,1.5,1.8,.9)
ttest(9,9,-3,1,1.5,1.8,.95)
ttest <- function(nx, ny, mx, my, sdx, sdy,a) {
Sp <- sqrt( ((nx-1)*sdx^2 + (ny-1)*sdy^2)/(nx+ny-2) )
ci = (mx-my) + c(-1,1)*qt(a,df=nx+ny-2)*Sp*sqrt((1/nx)+(1/ny))
ci
}
ttest(9,9,-3,1,1.5,1.8,.95)
6/qt(.95,df=8)
sqrt(6/qt(.95,df=8))
qt(.95,8)
qt(.05,8)
qt(.95,8)
1100 +c(-1,1)*qt(.95,8)*30/3
1100 +c(-1,1)*qt(.95,8)*10
1100 +c(-1,1)*qt(.90,8)*10
1100 +c(-1,1)*qt(.95,8)*10
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
library(manipulate)
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(gglplot2)
library(ggplot2)
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
qt(.975,df=8)
1100 + qt(.975,df=8)*c(-1,1)*10
6/qt(.975,df=8)
1100 + qt(.975,df=8)*c(-1,1)*10
1100 + qt(.95,df=8)*c(-1,1)*10
1123.06-1076.94
1118.595-1081.405
x1 = c(140,138,150,148,135)
x2 = c(132,135,151,146,130)
?t.test
t.test(x1,x2,paired=T,var.equal=T)
t.test(x1,x2,paired=T,var.equal=F)
1100 + qt(.975,df=8)*c(-1,1)*10
getwd()
setwd("D://work//courses//DataProducts/")
setwd("slidify/")
publish(user="stochasticstoic",repo="datasciencecoursera")
library(devtools)
publish(user="stochasticstoic",repo="datasciencecoursera")
getwd()
library(slidify)
publish(user="stochasticstoic",repo="datasciencecoursera")
setwd("titanic/")
publish(user="stochasticstoic",repo="datasciencecoursera")
